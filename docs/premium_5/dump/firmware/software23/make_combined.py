# Samples 3, 4, 6 "SOFTWARE 23"
# Reconstruct the ROM by using the good sections from each dump

import os

with open('../../samples/03_software23/dump.bin', 'rb') as f:
    sample03 = bytearray(f.read())

with open('../../samples/04_software23/attempt_2/dump.bin', 'rb') as f:
    sample04 = bytearray(f.read())

with open('../../samples/06_software23/dump.bin', 'rb') as f:
    sample06 = bytearray(f.read())

ffs = [0x00af, 0x0163, 0x02c3, 0x02e6, 0x02e7, 0x0302, 0x07a4, 0x0821, 0x09be, 0x09d8, 0x0aa4, 0x0b22, 0x0b27, 0x0b51, 0x0ef6, 0x1313, 0x1431, 0x148b, 0x15f3, 0x15f6, 0x1749, 0x17ed, 0x1b7d, 0x1be2, 0x1c26, 0x1c59, 0x1dfc, 0x2017, 0x20f4, 0x210b, 0x211a, 0x221f, 0x2759, 0x275a, 0x28ac, 0x2974, 0x2995, 0x29ac, 0x29fc, 0x2a38, 0x2cfb, 0x30db, 0x311f, 0x3193, 0x320f, 0x36ea, 0x3908, 0x3981, 0x3bd2, 0x3d21, 0x3ed3, 0x3ed8, 0x4255, 0x42a2, 0x42a4, 0x43ad, 0x4645, 0x484b, 0x49d5, 0x4a01, 0x4a08, 0x4aaa, 0x4ad6, 0x4add, 0x4b7e, 0x4bcd, 0x4c20, 0x4c4c, 0x4c53, 0x4c72, 0x4caa, 0x4cd9, 0x4ce2, 0x4e1c, 0x51ab, 0x5617, 0x5628, 0x56a5, 0x5746, 0x5772, 0x597a, 0x59e6, 0x59e7, 0x5a9c, 0x5b3b, 0x5c82, 0x5cb5, 0x5d67, 0x5d7d, 0x6223, 0x6228, 0x62f7, 0x6300, 0x630e, 0x6335, 0x6339, 0x6348, 0x67bf, 0x67d5, 0x67d7, 0x6842, 0x699b, 0x6a25, 0x6a27, 0x6a32, 0x6a5f, 0x6a61, 0x6a7d, 0x6a84, 0x6a9f, 0x6ab1, 0x6ab8, 0x6abf, 0x6acd, 0x6af6, 0x6b05, 0x6b09, 0x6b10, 0x6b19, 0x6b22, 0x6b2b, 0x6b34, 0x6b3f, 0x6b49, 0x6b6c, 0x6b7d, 0x6b93, 0x6ba0, 0x6bf1, 0x6bff, 0x6c16, 0x6c2f, 0x6c45, 0x6c5e, 0x6c83, 0x6c8f, 0x6dad, 0x6df8, 0x6e3b, 0x6ea9, 0x7037, 0x7047, 0x707e, 0x70a2, 0x7106, 0x712b, 0x7130, 0x7155, 0x7177, 0x7180, 0x71a8, 0x71b1, 0x71c7, 0x71d0, 0x71ee, 0x71fd, 0x721f, 0x7221, 0x7236, 0x7244, 0x7246, 0x7252, 0x7260, 0x7262, 0x726a, 0x7297, 0x72e4, 0x72ef, 0x7306, 0x7310, 0x734c, 0x7357, 0x738a, 0x73a6, 0x73d5, 0x73de, 0x73e0, 0x73e4, 0x73fb, 0x743d, 0x7442, 0x744d, 0x748e, 0x7493, 0x749e, 0x74c6, 0x74cb, 0x74d9, 0x74ea, 0x7536, 0x7580, 0x75d4, 0x75ec, 0x7601, 0x7621, 0x7639, 0x764e, 0x76bb, 0x76c6, 0x79b2, 0x7b61, 0x7c5e, 0x7d6d, 0x7ddd, 0x7e1e, 0x7f05, 0x7f6f, 0x80f4, 0x884d, 0x89b2, 0x89b5, 0x90b0, 0x90b3, 0x98dc, 0x9bee, 0xa041, 0xa044, 0xa187, 0xa1d5, 0xa1d8, 0xa3fe, 0xa4f4, 0xa5a0, 0xa618, 0xa63f, 0xa659, 0xa84d, 0xa85c, 0xa8bc, 0xa8cc, 0xa9b9, 0xa9ea, 0xaa3c, 0xab70, 0xaba1, 0xabaa, 0xabe2, 0xabe3, 0xacae, 0xacb1, 0xacb7, 0xacba, 0xad2f, 0xad32, 0xae2b, 0xae2e, 0xae99, 0xaeaa, 0xaebb, 0xaef5, 0xaef6, 0xaef8, 0xaeff, 0xaf02, 0xaf05, 0xaf0b, 0xaf0e, 0xaf1a, 0xaf8c, 0xafab, 0xafff, 0xb000, 0xb03d, 0xb06f, 0xb0e8, 0xb103, 0xb106, 0xb109, 0xb10c, 0xb10f, 0xb136, 0xb13c, 0xb13f, 0xb148, 0xb14b, 0xb14e, 0xb154, 0xb157, 0xb15a, 0xb15d, 0xb160, 0xb163, 0xb166, 0xb169, 0xb16c, 0xb1b8, 0xb1ba, 0xb1c2, 0xb25d, 0xb28b, 0xb293, 0xb29a, 0xb29b, 0xb29d, 0xb29f, 0xb2a0, 0xb2a5, 0xb2c2, 0xb2f1, 0xb302, 0xb3a9, 0xb3aa, 0xb3ab, 0xb3b7, 0xb3d1, 0xb47c, 0xb497, 0xb498, 0xb499, 0xb49a, 0xb49b, 0xb49c, 0xb49d, 0xb49e, 0xb4c7, 0xb4c8, 0xb4c9, 0xb4cb, 0xb4cc, 0xb4ce, 0xb4cf, 0xb502, 0xb503, 0xb504, 0xb505, 0xb509, 0xb50a, 0xb5b7, 0xb5ba, 0xb5bd, 0xb66c, 0xb66f, 0xb670, 0xb671, 0xb672, 0xb675, 0xb676, 0xb679, 0xb67a, 0xb6a7, 0xb6aa, 0xb6ad, 0xb6ff, 0xb705, 0xb71a, 0xb71d, 0xb720, 0xb723, 0xb726, 0xb83c, 0xb866, 0xb869, 0xb90e, 0xb914, 0xb983, 0xb9fd, 0xbab9, 0xbb56, 0xbb58, 0xbb5a, 0xbb69, 0xbb6b, 0xbbec, 0xbbee, 0xbbf0, 0xbbff, 0xbc01, 0xbc7a, 0xbc7b, 0xbcf1, 0xbcf8, 0xbcff, 0xbd0d, 0xbd12, 0xbd1e, 0xbd20, 0xbd2a, 0xbd33, 0xbd57, 0xbde0, 0xbea9, 0xbee3, 0xbfa3, 0xbfd1, 0xc062, 0xc064, 0xc066, 0xc068, 0xc06a, 0xc06c, 0xc06e, 0xc070, 0xc072, 0xc074, 0xc076, 0xc078, 0xc07a, 0xc07c, 0xc07e, 0xc080, 0xc082, 0xc084, 0xc086, 0xc088, 0xc08a, 0xc08c, 0xc08e, 0xc090, 0xc092, 0xc094, 0xc096, 0xc098, 0xc09a, 0xc157, 0xc179, 0xc1b4, 0xc1e2, 0xc25d, 0xc25f, 0xc261, 0xc263, 0xc265, 0xc267, 0xc269, 0xc26b, 0xc75c, 0xc75e, 0xc760, 0xc762, 0xc764, 0xc766, 0xc768, 0xc76a, 0xc76c, 0xc797, 0xc799, 0xc79b, 0xc79d, 0xc79f, 0xc7a1, 0xc7a3, 0xc7a5, 0xc7a7, 0xc7a9, 0xc7ab, 0xc7ad, 0xc7af, 0xc8b4, 0xc8b6, 0xc8b8, 0xc8ba, 0xc8bc, 0xc8be, 0xc8c0, 0xc8c2, 0xc8c4, 0xc8c6, 0xc8c8, 0xc8ca, 0xc8d4, 0xcf62, 0xcfd2, 0xd066, 0xd069, 0xd06c, 0xd075, 0xd078, 0xd07b, 0xd07e, 0xd081, 0xd087, 0xd08a, 0xd0b2, 0xd0ed, 0xd0f1, 0xd0f5, 0xd136, 0xd13a, 0xd230, 0xd257, 0xd38a, 0xd414, 0xd476, 0xd573, 0xd587, 0xd59b, 0xd685, 0xd6da, 0xd72e, 0xd782, 0xd7dc, 0xd813, 0xd995, 0xd9a5, 0xd9c1, 0xda2d, 0xda32, 0xdaaa, 0xdbcb, 0xdc32]

data = bytearray()
for address in range(0xf000):
    if address in ffs:
        data.append(0xFF)
    elif address < 0x0d00:
        data.append(sample06[address])
    elif (address >= 0xa000) and (address <= 0xb49b):
        data.append(sample04[address])
    else:
        data.append(sample03[address])

with open('combined.bin', 'wb') as f:
    f.write(data)

os.system('srec_cat combined.bin -binary -o combined.hex -intel -address-length=2 -line-length=44 -crlf')
